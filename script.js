// script.js - Frontend Application Logic with Firestore Integration

// --- Global Variables & Constants ---
// Backend URL for your chat endpoint
// UPDATED: Using the live Render backend URL
const BACKEND_CHAT_URL = 'https://elderease-chatbot.onrender.com/chat';
// Backend URLs for Firestore operations
// UPDATED: Using the live Render backend URL
const BACKEND_SAVE_CHAT_URL = 'https://elderease-chatbot.onrender.com/save-chat';
const BACKEND_LOAD_CHAT_URL = 'https://elderease-chatbot.onrender.com/load-chat';
const BACKEND_CLEAR_CHAT_URL = 'https://elderease-chatbot.onrender.com/clear-chat';

// GEMINI_MODEL is still defined, but the backend controls the actual model used.
const GEMINI_MODEL = 'gemini-1.5-flash-latest'; 

let currentLanguage = 'en'; // Default language
let isRecording = false; // Voice input status
let recognition; // Web Speech Recognition API instance
let synthesis = window.speechSynthesis; // Web Speech Synthesis API instance

// To store chat history that will be sent to the backend for context
let chatHistory = []; 

// NEW: User ID for persistent chat history
let userId = localStorage.getItem('elderEaseUserId');
if (!userId) {
    userId = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    localStorage.setItem('elderEaseUserId', userId);
    console.log('New user ID generated:', userId);
} else {
    console.log('Existing user ID:', userId);
}


// --- DOM Element References ---
const chatContainer = document.getElementById('chatContainer');
const userInput = document.getElementById('userInput');
const sendBtn = document.querySelector('.send-btn');
const voiceBtn = document.querySelector('.voice-btn');
const languageToggleBtn = document.querySelector('.language-toggle');
const statusText = document.getElementById('statusText');
const quickActionButtons = document.querySelectorAll('.quick-btn');
const clearChatBtn = document.getElementById('clearChatBtn');
const themeToggleBtn = document.getElementById('themeToggleBtn');


// --- Language-specific content (messages object - NO CHANGES HERE) ---
const messages = {
    welcome: {
        en: `üôè Namaste! Welcome to ElderEase!
        You can ask me anything:
        ‚Ä¢ How to use WhatsApp?
        ‚Ä¢ How to send money via UPI?
        ‚Ä¢ How to solve phone problems?`,
        hi: `üôè ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ElderEase ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!
        ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:
        ‚Ä¢ WhatsApp ‡§ï‡•à‡§∏‡•á ‡§ö‡§≤‡§æ‡§è‡§Ç?
        ‚Ä¢ UPI ‡§∏‡•á ‡§™‡•à‡§∏‡•á ‡§ï‡•à‡§∏‡•á ‡§≠‡•á‡§ú‡•á‡§Ç?
        ‚Ä¢ Phone ‡§ï‡•Ä problem ‡§ï‡•à‡§∏‡•á solve ‡§ï‡§∞‡•á‡§Ç?`
    },
    readyStatus: {
        en: 'üü¢ Ready to help ‚Ä¢ ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞',
        hi: 'üü¢ ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‚Ä¢ Ready to help'
    },
    thinkingStatus: {
        en: 'ü§î Thinking...',
        hi: 'ü§î ‡§∏‡•ã‡§ö ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç...'
    },
    responseSentStatus: {
        en: '‚úÖ Response sent!',
        hi: '‚úÖ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡§ø‡§Ø‡§æ!'
    },
    listeningStatus: {
        en: 'üé§ Listening...',
        hi: 'üé§ ‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç...'
    },
    voiceNotAvailable: {
        en: 'Voice recognition not available in your browser!',
        hi: 'Voice recognition ‡§Ü‡§™‡§ï‡•á browser ‡§Æ‡•á‡§Ç available ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à!'
    },
    apiError: {
        en: 'üòî Oops! I\'m having trouble connecting to the AI. Please check your internet and try again. If it persists, the service might be temporarily unavailable.',
        hi: 'üòî ‡§Æ‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç! ‡§Æ‡•Å‡§ù‡•á ‡§á‡§∏ ‡§∏‡§Æ‡§Ø AI ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§™‡§∞‡•á‡§∂‡§æ‡§®‡•Ä ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§î‡§∞ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Ø‡§¶‡§ø ‡§Ø‡§π ‡§¨‡§®‡§æ ‡§∞‡§π‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§∏‡•á‡§µ‡§æ ‡§Ö‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§Ö‡§®‡•Å‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à‡•§'
    },
    defaultFallback: {
        en: `I'm trying to help you! ü§î

        Please tell me what you need help with:
        ‚Ä¢ WhatsApp
        ‚Ä¢ UPI Payment
        ‚Ä¢ Phone Problems
        ‚Ä¢ Sending Photos
        ‚Ä¢ Emergency Help

        Or tap the Quick Help buttons! üëÜ`,
        hi: `‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç! ü§î

        ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§ï‡§ø‡§∏ ‡§ö‡•Ä‡§ú ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ö‡§æ‡§π‡§ø‡§è:
        ‚Ä¢ WhatsApp
        ‚Ä¢ UPI Payment
        ‚Ä¢ Phone ‡§ï‡•Ä Problems
        ‚Ä¢ Photo ‡§≠‡•á‡§ú‡§®‡§æ
        ‚Ä¢ Emergency Help

        ‡§Ø‡§æ ‡§´‡§ø‡§∞ Quick Help ‡§ï‡•á buttons ‡§¶‡§¨‡§æ‡§è‡§Ç!üëÜ`
    },
    whatsapp: {
        en: `WhatsApp steps:
        1Ô∏è‚É£ Install from Play Store.
        2Ô∏è‚É£ Enter phone number.
        3Ô∏è‚É£ Verify OTP.
        4Ô∏è‚É£ Add contact & message.
        üéØ For video calls, tap the video icon next to name!`,
        hi: `WhatsApp ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡•á steps follow ‡§ï‡§∞‡•á‡§Ç:
        1Ô∏è‚É£ Play Store ‡§∏‡•á WhatsApp install ‡§ï‡§∞‡•á‡§Ç
        2Ô∏è‚É£ ‡§Ö‡§™‡§®‡§æ phone number ‡§°‡§æ‡§≤‡•á‡§Ç
        3Ô∏è‚É£ OTP verify ‡§ï‡§∞‡•á‡§Ç
        4Ô∏è‚É£ Contact add ‡§ï‡§∞‡§ï‡•á message ‡§≠‡•á‡§ú‡•á‡§Ç
        üéØ Video call ‡§ï‡•á ‡§≤‡§ø‡§è contact ‡§ï‡•á name ‡§ï‡•á ‡§∏‡§æ‡§Æ‡§®‡•á video icon ‡§¶‡§¨‡§æ‡§è‡§Ç!`
    },
    upi: {
        en: `UPI Payment:
        1Ô∏è‚É£ Open UPI app (PhonePe, Google Pay).
        2Ô∏è‚É£ Tap 'Send Money'.
        3Ô∏è‚É£ Select contact or UPI ID.
        4Ô∏è‚É£ Enter amount.
        5Ô∏è‚É£ Enter UPI PIN.
        ‚ö†Ô∏è Warning: Never share your PIN!`,
        hi: `UPI Payment ‡§ï‡•á ‡§≤‡§ø‡§è:
        1Ô∏è‚É£ ‡§Ö‡§™‡§®‡§æ UPI app ‡§ñ‡•ã‡§≤‡•á‡§Ç (PhonePe, Google Pay, Paytm)
        2Ô∏è‚É£ 'Send Money' ‡§Ø‡§æ '‡§≠‡•á‡§ú‡•á‡§Ç' ‡§¶‡§¨‡§æ‡§è‡§Ç
        3Ô∏è‚É£ Contact select ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ UPI ID ‡§°‡§æ‡§≤‡•á‡§Ç
        4Ô∏è‚É£ Amount enter ‡§ï‡§∞‡•á‡§Ç
        5Ô∏è‚É£ UPI PIN ‡§°‡§æ‡§≤‡•á‡§Ç
        ‚ö†Ô∏è ‡§∏‡§æ‡§µ‡§ß‡§æ‡§®: ‡§ï‡§≠‡•Ä ‡§≠‡•Ä ‡§Ö‡§™‡§®‡§æ PIN ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•ã ‡§® ‡§¨‡§§‡§æ‡§è‡§Ç!`
    },
    phone_issues: {
        en: `Phone issues (e.g., hanging):
        1Ô∏è‚É£ Hold power button 10 secs (restart).
        2Ô∏è‚É£ Don't run too many apps.
        3Ô∏è‚É£ Clean phone storage.
        4Ô∏è‚É£ Install updates.
        üí° If problem persists, visit service center!`,
        hi: `Phone hang ‡§π‡•ã‡§®‡•á ‡§™‡§∞:
        1Ô∏è‚É£ Power button 10 seconds ‡§¶‡§¨‡§æ‡§ï‡•á ‡§∞‡§ñ‡•á‡§Ç (restart ‡§π‡•ã‡§ó‡§æ)
        2Ô∏è‚É£ ‡§¨‡§π‡•Å‡§§ ‡§∏‡§æ‡§∞‡•á apps ‡§è‡§ï ‡§∏‡§æ‡§• ‡§® ‡§ö‡§≤‡§æ‡§è‡§Ç
        3Ô∏è‚É£ Phone ‡§ï‡§æ storage clean ‡§ï‡§∞‡•á‡§Ç
        4Ô∏è‚É£ Updates install ‡§ï‡§∞‡•á‡§Ç
        üí° ‡§Ö‡§ó‡§∞ problem ‡§¨‡§®‡•Ä ‡§∞‡§π‡•á ‡§§‡•ã nearest service center ‡§ú‡§æ‡§è‡§Ç!`
    },
    photo: {
        en: `To send photos:
        1Ô∏è‚É£ Open WhatsApp chat.
        2Ô∏è‚É£ Tap üìé (attachment) icon.
        3Ô∏è‚É£ Select 'Gallery' or 'Camera'.
        4Ô∏è‚É£ Choose photo.
        5Ô∏è‚É£ Tap send button.
        üì∏ You can also take photos directly!`,
        hi: `Photo ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è:
        1Ô∏è‚É£ WhatsApp ‡§Æ‡•á‡§Ç chat ‡§ñ‡•ã‡§≤‡•á‡§Ç
        2Ô∏è‚É£ ‡§®‡•Ä‡§ö‡•á üìé (attachment) icon ‡§¶‡§¨‡§æ‡§è‡§Ç
        3Ô∏è‚É£ 'Gallery' ‡§Ø‡§æ 'Camera' select ‡§ï‡§∞‡•á‡§Ç
        4Ô∏è‚É£ 'Photo' choose ‡§ï‡§∞‡•á‡§Ç
        5Ô∏è‚É£ Send button ‡§¶‡§¨‡§æ‡§è‡§Ç
        üì∏ Camera ‡§∏‡•á direct photo ‡§≠‡•Ä ‡§≤‡•á ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç!`
    },
    emergency: {
        en: `In Emergency:
        1Ô∏è‚É£ Dial 112 (free emergency number).
        2Ô∏è‚É£ Police: 100
        3Ô∏è‚É£ Fire: 101
        4Ô∏è‚É£ Ambulance: 108
        üö® Keep emergency contacts saved. Learn to share location!`,
        hi: `Emergency ‡§Æ‡•á‡§Ç:
        1Ô∏è‚É£ 112 dial ‡§ï‡§∞‡•á‡§Ç (free emergency number)
        2Ô∏è‚É£ Police ‡§ï‡•á ‡§≤‡§ø‡§è 100
        3Ô∏è‚É£ Fire ‡§ï‡•á ‡§≤‡§ø‡§è 101
        4Ô∏è‚É£ Ambulance ‡§ï‡•á ‡§≤‡§ø‡§è 108
        üö® Emergency contacts family ‡§Æ‡•á‡§Ç save ‡§ï‡§∞‡§ï‡•á ‡§∞‡§ñ‡•á‡§Ç‡•§ Location share ‡§ï‡§∞‡§®‡§æ ‡§≠‡•Ä ‡§∏‡•Ä‡§ñ‡•á‡§Ç!`
    },
    clean: {
        en: `To clean phone:
        1Ô∏è‚É£ Go to Settings.
        2Ô∏è‚É£ Find 'Storage'.
        3Ô∏è‚É£ Tap 'Clean'.
        3Ô∏è‚É£ Clear cache.
        4Ô∏è‚É£ Delete unused apps.
        üßπ Do this weekly to keep phone fast!`,
        hi: `Phone clean ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è:
        1Ô∏è‚É£ Settings ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§è‡§Ç
        2Ô∏è‚É£ 'Storage' ‡§Ø‡§æ '‡§≠‡§Ç‡§°‡§æ‡§∞‡§£' ‡§ñ‡•ã‡§ú‡•á‡§Ç
        3Ô∏è‚É£ 'Clean' ‡§Ø‡§æ '‡§∏‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç' ‡§¶‡§¨‡§æ‡§è‡§Ç
        4Ô∏è‚É£ Cache clear ‡§ï‡§∞‡•á‡§Ç
        5Ô∏è‚É£ Unused apps delete ‡§ï‡§∞‡•á‡§Ç
        üßπ ‡§π‡§∞ ‡§π‡§´‡•ç‡§§‡•á ‡§Ø‡•á ‡§ï‡§∞‡•á‡§Ç phone fast ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è!`
    }
};

// --- API Service Functions ---

/**
 * Calls the backend API with the user's message and chat history.
 * This function is now responsible for communicating with your Node.js Express server.
 * @param {string} userMessage - The message from the user.
 * @returns {Promise<string>} The bot's response.
 */
async function getAIResponse(userMessage) {
    try {
        const response = await fetch(BACKEND_CHAT_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: userMessage,
                history: chatHistory, // Send the entire chat history for context
                language: currentLanguage, // Send current language for backend's system instruction
                userId: userId // NEW: Send userId to backend
            }),
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.error('Backend API Error (chat):', response.status, errorData);
            console.warn('Backend returned an error. Falling back to pattern matching.');
            return messages.apiError[currentLanguage];
        }

        const data = await response.json();
        return data.response;

    } catch (error) {
        console.error('Network or Backend connection error (chat):', error);
        console.warn('Backend connection failed. Falling back to pattern matching.');
        return getPatternResponse(userMessage);
    }
}

/**
 * Saves the current chat history to the backend (Firestore).
 */
async function saveChatHistory() {
    try {
        const response = await fetch(BACKEND_SAVE_CHAT_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userId: userId,
                history: chatHistory // Send the current chatHistory array
            }),
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.error('Backend API Error (save chat):', response.status, errorData);
        } else {
            console.log('Chat history saved successfully.');
        }
    } catch (error) {
        console.error('Network or Backend connection error (save chat):', error);
    }
}

/**
 * Loads chat history for the current user from the backend (Firestore).
 * @returns {Promise<Array>} The loaded chat history.
 */
async function loadChatHistory() {
    try {
        const response = await fetch(`${BACKEND_LOAD_CHAT_URL}/${userId}`);
        if (!response.ok) {
            const errorData = await response.json();
            console.error('Backend API Error (load chat):', response.status, errorData);
            return []; // Return empty array on error
        }
        const data = await response.json();
        return data.history || []; // Return history or empty array if null/undefined
    } catch (error) {
        console.error('Network or Backend connection error (load chat):', error);
        return []; // Return empty array on network error
    }
}

/**
 * Clears chat history for the current user from the backend (Firestore).
 */
async function clearChatHistoryBackend() {
    try {
        const response = await fetch(`${BACKEND_CLEAR_CHAT_URL}/${userId}`, {
            method: 'DELETE',
        });
        if (!response.ok) {
            const errorData = await response.json();
            console.error('Backend API Error (clear chat):', response.status, errorData);
        } else {
            console.log('Chat history cleared from backend.');
        }
    } catch (error) {
        console.error('Network or Backend connection error (clear chat):', error);
    }
}


// --- UI Management ---

function updateStatus(text) {
    statusText.textContent = text;
    if (!isRecording && !text.includes('Listening')) {
        setTimeout(() => {
            statusText.textContent = messages.readyStatus[currentLanguage];
        }, 3000);
    }
}

function addMessage(text, isUser = false, addToHistory = true) { // NEW: addToHistory parameter
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('message');
    messageDiv.classList.add(isUser ? 'user' : 'bot');

    const messageContent = document.createElement('div');
    messageContent.classList.add('message-content');
    messageContent.innerHTML = text.replace(/\n/g, '<br>');

    messageDiv.appendChild(messageContent);
    chatContainer.appendChild(messageDiv);

    chatContainer.scrollTop = chatContainer.scrollHeight;

    // Add message to chatHistory array only if addToHistory is true
    if (addToHistory) {
        // Exclude the initial system instruction/model response from history, as backend will add it
        if (isUser || (!isUser && !text.includes("Understood. I will provide simple, step-by-step tech assistance"))) {
            chatHistory.push({
                role: isUser ? "user" : "model",
                parts: [{ text: text }]
            });
        }
    }
}

function showTypingIndicator() {
    const typingDiv = document.createElement('div');
    typingDiv.classList.add('typing-indicator');
    typingDiv.id = 'typingIndicator';

    typingDiv.innerHTML = `
        <div class="typing-dots">
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
        </div>
        <span>ElderEase is typing...</span>
    `;

    chatContainer.appendChild(typingDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

function hideTypingIndicator() {
    const typingIndicator = document.getElementById('typingIndicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

// --- Speech Services (NO CHANGES TO THESE FUNCTIONS) ---
function setupSpeechRecognition() {
    if ('webkitSpeechRecognition' in window) {
        recognition = new webkitSpeechRecognition();
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = currentLanguage === 'hi' ? 'hi-IN' : 'en-US';

        recognition.onresult = (event) => {
            const transcript = event.results[0][0].transcript;
            userInput.value = transcript;
            sendMessage();
        };

        recognition.onend = () => {
            isRecording = false;
            voiceBtn.classList.remove('recording');
            voiceBtn.innerHTML = 'üé§';
            updateStatus(messages.readyStatus[currentLanguage]);
        };

        recognition.onerror = (event) => {
            console.error('Speech recognition error:', event.error);
            isRecording = false;
            voiceBtn.classList.remove('recording');
            voiceBtn.innerHTML = 'üé§';
            updateStatus(messages.readyStatus[currentLanguage]);
            if (event.error === 'not-allowed') {
                alert('Microphone access denied. Please allow microphone permissions in your browser settings.');
            } else if (event.error === 'no-speech') {
                console.warn('No speech detected.');
            } else {
                alert(`Speech recognition error: ${event.error}. Please try again.`);
            }
        };
    } else {
        voiceBtn.style.display = 'none';
        console.warn('Web Speech Recognition not supported in this browser.');
    }
}

function toggleVoice() {
    if (!recognition) {
        alert(messages.voiceNotAvailable[currentLanguage]);
        return;
    }

    if (isRecording) {
        recognition.stop();
    } else {
        recognition.start();
        isRecording = true;
        voiceBtn.classList.add('recording');
        voiceBtn.innerHTML = 'üõë';
        updateStatus(messages.listeningStatus[currentLanguage]);
    }
}

function speakResponse(text) {
    if (synthesis) {
        synthesis.cancel();
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = currentLanguage === 'hi' ? 'hi-IN' : 'en-US';
        utterance.rate = 0.8;
        utterance.pitch = 1.1;
        synthesis.speak(utterance);
    }
}

// --- Main Event Handlers & Logic ---

// Fallback to pattern matching for common queries if API fails (NO CHANGES TO THIS FUNCTION)
function getPatternResponse(userMessage) {
    const message = userMessage.toLowerCase();

    if (message.includes('whatsapp') || message.includes('‡§µ‡•ç‡§π‡§æ‡§ü‡•ç‡§∏‡§è‡§™')) {
        return messages.whatsapp[currentLanguage];
    } else if (message.includes('upi') || message.includes('payment') || message.includes('‡§™‡•á‡§Æ‡•á‡§Ç‡§ü') || message.includes('‡§≠‡•Å‡§ó‡§§‡§æ‡§®')) {
        return messages.upi[currentLanguage];
    } else if (message.includes('hang') || message.includes('slow') || message.includes('‡§π‡•à‡§Ç‡§ó') || message.includes('‡§ß‡•Ä‡§Æ‡§æ') || message.includes('problem') || message.includes('‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ')) {
        return messages.phone_issues[currentLanguage];
    } else if (message.includes('photo') || message.includes('‡§´‡•ã‡§ü‡•ã') || message.includes('picture') || message.includes('send image')) {
        return messages.photo[currentLanguage];
    } else if (message.includes('emergency') || message.includes('‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤') || message.includes('‡§á‡§Æ‡§∞‡§ú‡•á‡§Ç‡§∏‡•Ä')) {
        return messages.emergency[currentLanguage];
    } else if (message.includes('clean') || message.includes('‡§∏‡§æ‡§´') || message.includes('clear') || message.includes('storage')) {
        return messages.clean[currentLanguage];
    } else {
        return messages.defaultFallback[currentLanguage];
    }
}

// sendMessage function (UPDATED to save chat history)
async function sendMessage() {
    const userMessage = userInput.value.trim();

    if (!userMessage) {
        updateStatus(messages.noInputWarning[currentLanguage]);
        speakResponse(messages.noInputWarning[currentLanguage]);
        return;
    }

    addMessage(userMessage, true); // Add user message to UI and chatHistory
    userInput.value = '';

    showTypingIndicator();
    updateStatus(messages.thinkingStatus[currentLanguage]);

    const botResponse = await getAIResponse(userMessage); // Get AI response from backend
    hideTypingIndicator();
    addMessage(botResponse); // Add bot response to UI and chatHistory

    // NEW: Save the updated chat history after each turn
    await saveChatHistory();

    speakResponse(botResponse);
    updateStatus(messages.responseSentStatus[currentLanguage]);
}

function toggleLanguage() {
    currentLanguage = currentLanguage === 'hi' ? 'en' : 'hi';
    languageToggleBtn.textContent = currentLanguage === 'hi' ? 'üåê EN/‡§π‡§ø‡§Ç' : 'üåê ‡§π‡§ø‡§Ç/EN';
    
    // Clear chat UI, but don't clear history from backend immediately
    clearChatUIOnly(); 

    // Update static UI texts
    document.querySelector('.welcome-message div:first-child').textContent = messages.welcome[currentLanguage].split('\n')[0].trim();
    document.querySelector('.welcome-message div:last-child').innerHTML = messages.welcome[currentLanguage].split('\n').slice(1).join('<br>').trim();

    quickActionButtons.forEach(button => {
        const originalQuestion = button.dataset.question;
        if (currentLanguage === 'hi') {
            if (originalQuestion.includes('WhatsApp')) button.textContent = 'üì± WhatsApp';
            else if (originalQuestion.includes('UPI payment')) button.textContent = 'üí≥ UPI Payment';
            else if (originalQuestion.includes('phone is hanging')) button.textContent = 'üìû Phone Issues';
            else if (originalQuestion.includes('send photos')) button.textContent = 'üì∏ Photos ‡§≠‡•á‡§ú‡•á‡§Ç';
            else if (originalQuestion.includes('emergency')) button.textContent = 'üö® Emergency';
            else if (originalQuestion.includes('clean my phone')) button.textContent = 'üßπ Phone ‡§∏‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç';
            else button.textContent = originalQuestion;
        } else {
            button.textContent = originalQuestion;
        }
    });

    userInput.placeholder = currentLanguage === 'hi' ? '‡§Ö‡§™‡§®‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§Ø‡§π‡§æ‡§Å ‡§≤‡§ø‡§ñ‡•á‡§Ç... Type your question here...' : 'Type your question here... ‡§Ö‡§™‡§®‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§Ø‡§π‡§æ‡§Å ‡§≤‡§ø‡§ñ‡•á‡§Ç...';
    document.querySelector('.quick-actions h3').textContent = currentLanguage === 'hi' ? 'üöÄ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§Æ‡§¶‡§¶' : 'üöÄ Quick Help';
    updateStatus(messages.readyStatus[currentLanguage]);

    if (recognition) {
        recognition.lang = currentLanguage === 'hi' ? 'hi-IN' : 'en-US';
    }
    // After changing language, reload history to ensure it's displayed in the new language context
    // This will also re-populate chatHistory array for the AI.
    loadAndDisplayChatHistory(currentLanguage);
}

// NEW: Function to clear only the UI messages, not the backend history
function clearChatUIOnly() {
    const welcomeMessageDiv = document.querySelector('.welcome-message');
    while (chatContainer.firstChild && chatContainer.firstChild !== welcomeMessageDiv) {
        chatContainer.removeChild(chatContainer.firstChild);
    }
    while (welcomeMessageDiv.nextSibling) {
        chatContainer.removeChild(welcomeMessageDiv.nextSibling);
    }
}

// UPDATED: clearChatMessages now also clears backend history
async function clearChatMessages() {
    clearChatUIOnly(); // Clear UI first
    chatHistory = []; // Reset local history

    await clearChatHistoryBackend(); // Clear history from Firestore

    // Display welcome message after clearing
    const welcomeGreeting = messages.welcome[currentLanguage].split('\n')[0].trim();
    const welcomeInstructions = messages.welcome[currentLanguage].split('\n').slice(1).join('\n').trim();
    document.querySelector('.welcome-message div:first-child').textContent = welcomeGreeting;
    document.querySelector('.welcome-message div:last-child').innerHTML = welcomeInstructions.replace(/\n/g, '<br>');

    updateStatus(messages.readyStatus[currentLanguage]);
    speakResponse(welcomeGreeting);
}


// NEW: Function to load and display chat history on page load or language change
async function loadAndDisplayChatHistory(lang) {
    clearChatUIOnly(); // Clear existing messages before loading new ones
    chatHistory = []; // Clear local history before loading

    const loadedHistory = await loadChatHistory();
    if (loadedHistory && loadedHistory.length > 0) {
        // Filter out initial system instructions that backend adds
        // We only want to display actual user/model turns in the UI
        const displayableHistory = loadedHistory.filter(msg => 
            msg.role === 'user' || 
            (msg.role === 'model' && !msg.parts[0].text.includes("Understood. I will provide simple, step-by-step tech assistance"))
        );

        displayableHistory.forEach(msg => {
            addMessage(msg.parts[0].text, msg.role === 'user', false); // Don't add to history again
        });
        chatHistory = loadedHistory; // Set the full loaded history to chatHistory for AI context
    } else {
        // If no history, display the initial welcome message
        const welcomeGreeting = messages.welcome[currentLanguage].split('\n')[0].trim();
        const welcomeInstructions = messages.welcome[currentLanguage].split('\n').slice(1).join('\n').trim();
        document.querySelector('.welcome-message div:first-child').textContent = welcomeGreeting;
        document.querySelector('.welcome-message div:last-child').innerHTML = welcomeInstructions.replace(/\n/g, '<br>');
        
        // Speak welcome message only if no history was loaded
        setTimeout(() => {
            speakResponse(welcomeGreeting);
        }, 1000);
    }
    updateStatus(messages.readyStatus[currentLanguage]);
}


// NEW: Function to toggle light/dark theme (NO CHANGES TO ITS LOGIC)
function toggleTheme() {
    document.body.classList.toggle('dark-theme');
    // Save theme preference to localStorage
    if (document.body.classList.contains('dark-theme')) {
        localStorage.setItem('theme', 'dark');
        themeToggleBtn.innerHTML = '‚òÄÔ∏è Light Mode'; // Change button text/icon for light mode
    } else {
        localStorage.setItem('theme', 'light');
        themeToggleBtn.innerHTML = 'üåô Dark Mode'; // Change button text/icon for dark mode
    }
}


// --- Initial Setup and Event Listeners ---
document.addEventListener('DOMContentLoaded', async () => { // Made async to await loadAndDisplayChatHistory
    userInput.focus();
    setupSpeechRecognition();

    // Check for saved theme preference and apply on load
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        document.body.classList.add('dark-theme');
        themeToggleBtn.innerHTML = '‚òÄÔ∏è Light Mode';
    } else {
        themeToggleBtn.innerHTML = 'üåô Dark Mode';
    }

    // Load and display chat history for the user
    await loadAndDisplayChatHistory(currentLanguage);

    // Set initial quick action button texts
    quickActionButtons.forEach(button => {
        button.textContent = button.dataset.question;
    });

    // Event Listeners
    sendBtn.addEventListener('click', sendMessage);
    userInput.addEventListener('keypress', (event) => {
        if (event.key === 'Enter') {
            sendMessage();
        }
    });
    voiceBtn.addEventListener('click', toggleVoice);
    languageToggleBtn.addEventListener('click', toggleLanguage);
    clearChatBtn.addEventListener('click', clearChatMessages);
    themeToggleBtn.addEventListener('click', toggleTheme);


    quickActionButtons.forEach(button => {
        button.addEventListener('click', () => {
            userInput.value = button.dataset.question;
            sendMessage();
        });
    });
});